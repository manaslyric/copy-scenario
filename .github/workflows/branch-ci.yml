name: CI workflow for Building copy scenario image

on:
  workflow_dispatch:
  push:
    branches-ignore:
      - 'releases/**'
      - 'hotfixes/**'
    tags:
        - '*'
        - '**'
    paths-ignore:
      - .github/workflows/actions.yml
      - .github/workflows/dependabot.yml
      - .github/workflows/pull_request.yml

permissions:
  id-token: write
  contents: read

jobs:
  docker_publish:
    name: Build and Publish Notes Docker Image
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.AWS_ECR_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
        role-duration-seconds: 900

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        IMAGE_TAG: "${{ github.ref_name == 'main' && 'latest' || github.ref_name }}"
        ECR_REPOSITORY: ${{ github.event.repository.name }}
        ECR_REGISTRY:  ${{ steps.login-ecr.outputs.registry }}
        CHAINBRAIN_TOKEN: ${{ secrets.CHAINBRAIN_TOKEN }}
        LYRIC_GITHUB_USERNAME: ${{ secrets.LYRIC_GITHUB_USERNAME }}
        LYRIC_GITHUB_TOKEN: ${{ secrets.LYRIC_GITHUB_TOKEN }}
      run: |
        echo "github credentials: $LYRIC_GITHUB_USERNAME, $LYRIC_GITHUB_TOKEN"

        # Build a docker container and push it to ECR
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY || aws ecr create-repository \
          --repository-name $ECR_REPOSITORY --image-scanning-configuration scanOnPush=true \
          --encryption-configuration '{"encryptionType":"KMS"}' \
          --tags Key=sprinto,Value=prod Key=env,Value=prod
        docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG || true
        #DOCKER_BUILDKIT=1 docker build --cache-from $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        DOCKER_BUILDKIT=1 docker build \
          --build-arg private_repo_username=chainbrain-token \
          --build-arg private_repo_token=${CHAINBRAIN_TOKEN} \
          --build-arg github_username=${LYRIC_GITHUB_USERNAME} \
          --build-arg github_token=${LYRIC_GITHUB_TOKEN} \
          --build-arg docker_registry=${ECR_REGISTRY} \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        echo "Pushing Image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::group::Image Tag"
        echo "$IMAGE_TAG"
        echo "::endgroup::"
